64. Minimum Path Sum

给定一个m*n大小的网格矩阵，每个格点上都有1个非负整数。
要求找到一条从左上到右下的路径，使得路径上的和最小。
只能向右或向下移动。

分析：
dp题。
dp[i][j] = min(dp[i-1][j], dp[i][j-1])+matrix[i][j]

代码：
1Y

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        if (m == 0) return 0;
        int n = grid[0].size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, INT_MIN));
        dp[0][0] = grid[0][0];
        for (int i = 1; i < m; ++i)
            dp[i][0] = grid[i][0] + dp[i-1][0];
        for (int i = 1; i < n; ++i)
            dp[0][i] = grid[0][i] + dp[0][i-1];
        for (int i = 1; i < m; ++i)
            for (int j = 1; j < n; ++j)
                dp[i][j] = min(dp[i-1][j], dp[i][j-1])+grid[i][j];
        return dp[m-1][n-1];
    }
};