198. House Robber

给定一个数组，求最大的不相邻数的和。

分析
用dp做。递推公式
dp[i][0] = dp[i-1][0],dp[i-2][1],dp[i-2][0]
dp[i]表示到第i个元素为止的最优结果，dp[i][0]表示不选第i个，dp[i][1]表示选第i个。
dp[0][0] = 0
dp[0][1] = 1

代码：
// 可以说是第一道没有任何帮助、提示下完全独立做出来的DP题。
class Solution {
public:
    int rob(vector<int>& nums) {
        if (nums.size() == 0) return 0;

        int dp[nums.size()][2];
        for (int i = 0; i < nums.size(); ++i) {
            dp[i][0] = dp[i][1] = 0;
        }
        dp[0][0] = 0; dp[0][1] = nums[0];

        for (int i = 1; i < nums.size(); ++i) {
            dp[i][0] = max(dp[i-1][0], max(dp[i-1][1], dp[i-1][0]));
            if (i > 1) dp[i][1] = max(dp[i-1][0], max(dp[i-2][1], dp[i-2][0]))+nums[i];
            else dp[1][1] = dp[0][0]+nums[1];
        }

        return max(dp[nums.size()-1][0],dp[nums.size()-1][1]);
    }
};

// 更快的算法
class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if (n==0) return 0;
        if (n==1) return nums[0];

        int prepre=0, pre=0, cur;
        for (int i=0; i<n; i++) {
            cur=max(prepre+nums[i], pre);
            prepre=pre;
            pre=cur;
        }
        return cur;
    }
};