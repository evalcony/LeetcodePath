313.超级丑数

编写一段程序来查找第 n 个超级丑数。

超级丑数是指其所有质因数都是长度为 k 的质数列表 primes 中的正整数。

示例:

输入: n = 12, primes = [2,7,13,19]
输出: 32 
解释: 给定长度为 4 的质数列表 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。

思路：
如果做过丑数II那题，这题就用那题的思路做，n指针。丑数II那题是用3指针。

# java

class Solution {
    public int nthSuperUglyNumber(int n, int[] primes) {
        int[] idx = new int[primes.length], dp = new int[n];
        int i = 1;
        dp[0] = 1;
        while (i < n) {
            int j = 0, min = Integer.MAX_VALUE;
            for (int p : primes) {
                if (p * dp[idx[j]] < min)
                    min = p * dp[idx[j]];
                ++j;
            }
            dp[i] = min;
            j = 0;
            for (int p : primes) {
                if (min == p * dp[idx[j]])
                    idx[j]++;
                ++j;
            }
            ++i;
        }
        return dp[dp.length-1];
    }
}