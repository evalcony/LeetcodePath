456. 132 Pattern

题意：
在一个数组中，是否存在这样的3个数，使得a[i]<a[k]<a[j], 并且下标i<j<k。
数组规模不超过15000.

思路：
这题卡时间卡的比较紧，我把复杂度做到O(n^2)，并且还做了优化才过。
遍历中点，然后先寻找中点右边序列中小于它的最大值。
然后对中点左边的数进行遍历，判断能否构成这样一组数。

还可以对数组本身进行优化。可以先对数组去连续重复数，再判断如果数组中出现的数值种类不超过3个，则显然不行。

-----
一开始的做法由于缺少优化，会TLE。
一开始想到是，vector[i][j]，存放比元素a[i]大的第j个数。然后求在第j个数右边且比它小的最大的数。
之后再进行比较。


代码：
class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        if (nums.size() == 0) return false;
        vector<int> x;
        set<int> s;
        int pre = nums[0];
        x.push_back(pre);
        s.insert(pre);
        for (int i = 1; i < nums.size(); ++i) {
            if (pre != nums[i]) {
                pre = nums[i];
                x.push_back(pre);
                s.insert(pre);
            }
        }
        if (s.size() < 3) return false;
        
        for (int mid = 1; mid < x.size() - 1; ++mid) {
            int max_r = INT_MIN;
            for (int right = mid + 1; right < x.size(); ++right) {
                if (x[mid] > x[right]) {
                    max_r = x[right] > max_r ? x[right] : max_r;
                }
            }
            if (max_r == INT_MIN) continue;
            for (int left = 0; left < mid; ++left) {
                if (x[left] < x[mid] && x[left] < max_r) return true;
            }
        }
        return false;
    }
};


思路2：
速度快的做法，效率接近O(n)

思路是我们维护一个栈和一个变量third，其中third就是第三个数字,栈里面按顺序放所有大于third的数字.那么我们在遍历的时候，如果当前数字小于third，即pattern 132中的1找到了，我们直接返回true即可，因为已经找到了，注意我们应该从后往前遍历数组。如果当前数字大于栈顶元素，那么我们按顺序将栈顶数字取出，赋值给third，然后将该数字压入栈，这样保证了栈里的元素仍然都是大于third的，我们想要的顺序依旧存在，进一步来说，栈里存放的都是可以维持second > third的second值，其中的任何一个值都是大于当前的third值，如果有更大的值进来，那就等于形成了一个更优的second > third的这样一个组合，并且这时弹出的third值比以前的third值更大，为什么要保证third值更大，因为这样才可以更容易的满足当前的值first比third值小这个条件


代码：
class Solution {
public:
    bool find132pattern(vector<int>& nums) 
    {
        int s3=INT_MIN;
        stack<int> s;
        for(int i=nums.size()-1;i>=0;i--)
        {
            if(nums[i]<s3) return true;
            else while(!s.empty() && nums[i]>s.top())
            {
                s3=s.top(); s.pop();
            }
            s.push(nums[i]);
        }
        return false;
    }
};
