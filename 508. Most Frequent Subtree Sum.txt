508. Most Frequent Subtree Sum

给一棵树，找出现次数最多的子树和。子树和就是一个结点以及它下方所有结点构成的子树的总和，在这些总和中找一个出现次数最多的结果，如果有很多个这样的结果，返回这些结果构成的数组


代码：

class Solution {
private:
    map<int, int> m;
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        vector<int> result;
        dfs(root);
        int maxn = 0;
        for (auto it = m.begin(); it != m.end(); it++)
            maxn = max(maxn, it->second);
        for (auto it = m.begin(); it != m.end(); it++)
            if (it->second == maxn)
                result.push_back(it->first);
        return result;
    }
    
    void dfs(TreeNode* root) {
        if (root == nullptr) return ;
        if (root->left != nullptr) {
            dfs(root->left);
            root->val += root->left->val;
        }
        if (root->right != nullptr) {
            dfs(root->right);
            root->val += root->right->val;
        }
        m[root->val]++;
    }
};