329. Longest Increasing Path in a Matrix

给定一个矩阵，可以从一点向上下左右4个方向移动。每个点有一个数字，求最长的路径的长度，使得路径数字是递增的。

分析：
不怎么会的一道题

代码：
做了一下优化后才不会TLE的代码
class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if (matrix == NULL || matrix.size() == 0 || matrix[0].size() == 0) return 0;

        vector<vector<int>> cache;
        for (int i = 0; i < matrix.size(); ++i) {
            vector<int> v;
            for (int j = 0; j < matrix[i].size(); ++j)
                v.push_back(0);
            cache.push_back(v);
            v.clear();
        }
        int ans = 0;
        for (int i = 0; i < matrix.size(); ++i)
            for (int j = 0; j < matrix[i].size(); ++j) {
                int len = findSmall(i, j, matrix, cache, 1e8);
                ans = max(len, ans);
            }
        return ans;
    }

    int findSmall(int i, int j, vector<vector<int>> matrix, vector<vector<int>> cache, int pre) {
        if (i < 0 || i >= matrix.size() || j < 0 || j >= matrix[i].size() || matrix[i][j] >= pre) return 0;

        if (cache[i][j] > 0) {
            return cache[i][j];
        } else {
            int cur = matrix[i][j];
            int temp = 0;
            temp = max(findSmall(i-1, j, matrix, cache, cur), temp);
            temp = max(findSmall(i+1, j, matrix, cache, cur), temp);
            temp = max(findSmall(i, j-1, matrix, cache, cur), temp);
            temp = max(findSmall(i, j+1, matrix, cache, cur), temp);
            cache[i][j] = ++temp;
            return temp;
        }
    }
};


比较快的代码
class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.empty())
            return 0;
        int maxlen=0;
        int m=matrix.size();
        int n=matrix[0].size();
        vector<vector<int>> dp(m,vector<int>(n,INT_MIN));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(dp[i][j]==INT_MIN)
                    maxlen=max(maxlen,next(matrix,i,j,dp));
            }
        }
       
        return maxlen;
    }
    
    int next(vector<vector<int>>& matrix, int i,int j,vector<vector<int>>& dp){
        if(dp[i][j]!=INT_MIN)
            return dp[i][j];
        int m=matrix.size();
        int n=matrix[0].size();
        int count=1;
        if(i-1>=0 && matrix[i-1][j]>matrix[i][j]){
           count=max(count, 1+next(matrix,i-1,j,dp));
        }
        if(i+1<m && matrix[i+1][j]>matrix[i][j]){
           count=max(count, 1+next(matrix,i+1,j,dp));
        }
        if(j-1>=0 && matrix[i][j-1]>matrix[i][j]){
           count=max(count, 1+next(matrix,i,j-1,dp));
        }
        if(j+1<n && matrix[i][j+1]>matrix[i][j]){
           count=max(count, 1+next(matrix,i,j+1,dp));
        }
        
        dp[i][j]=count;
        return count;
        
    }
};