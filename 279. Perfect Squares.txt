279. Perfect Squares

给定一个数，判断它是最少多少个数的平方和。

分析：
贪心似乎不行，比如12这个例子，用贪心的话，12=9+1+1+1=(4)。但事实上，12=4+4+4=(3)。
似乎应该用dp。
dp[n] = d[i] + dp[n-i]
所以dp[12]=dp[8]+dp[4]=dp[4]+dp[4]+dp[4]=(3)
步长是平方数，即1,4,9,16,...

代码：
////////////////////////
100ms 处在所有提交的中间位置。

class Solution {
public:
    int numSquares(int n) {
        vector<int> dp;
        dp.push_back(0);
        dp.push_back(1);

        for (int i = 2; i <= n; ++i) {
            dp.push_back(i);
            if (isSquare(i)) {dp[i] = 1; continue;}
            for (int j = 1; j*j < i; ++j) {
                dp[i] = min(dp[i], dp[j*j] + dp[i-j*j]);
            }
        }

        return dp[n];
    }
    bool isSquare(int n) {
        double x = sqrt(n);
        return x-(int)x < 1e-8;
    }
};

////////////////////////////
更快的代码
6ms

class Solution {
public:
    int numSquares2(int n) {
        vector<int> res(n+1,0);
        for(int i = 1; i * i <= n; i++){
        	res[i*i] = 1;
        	if(i*i == n) return 1;
        }
        
        for(int i = 1; i <= n; i++){
        	int minval = i;
        	//if(res[i] == 1)	continue;
        	for(int j = 1; j * j <= i; j++){
        		minval = min(minval, res[i - j * j] + 1);
        	}
        	res[i] = minval;
        }
        return res[n];
    }
    
    int numSquares(int n) {
        static vector<int> res = {0};
        
        while(res.size() <= n){
            int i = res.size();
        	int minval = INT_MAX;
        	for(int j = 1; j * j <= i; j++){
        		minval = min(minval, res[i - j * j] + 1);
        	}
        	//cout << "i: " << minval << endl;
        	res.push_back(minval);
        }
        return res[n];
    }    
    
};